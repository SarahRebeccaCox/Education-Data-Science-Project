while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
	if (coef(summary(model))[1,2]+coef(summary(model))[1,1])>3) {#
		a <- a+1}#
	if (coef(summary(model))[1,2]-coef(summary(model))[1,1])<3) {#
		a <- a+1}#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
	if (coef(summary(model))[1,2]+coef(summary(model))[1,1])>3) {#
		a <- a+1#
	}#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
	if (coef(summary(model))[1,2]+coef(summary(model))[1,1])>3) {#
		a <- a+1#
	}#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	i<-i+1#
	if (coef(summary(model))[1,2]+coef(summary(model))[1,1])>3)#
		a <- a+1#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	i<-i+1#
	if (int.se + b0)>3)#
		a <- a+1#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	i<-i+1#
	if (int.se + b0)>3) a <- a+1#
}
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	i<-i+1#
	if (int.se + b0)>3) a <- a+1#
	}
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	i<-i+1#
#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (int.se + b0)>3) a <- a+1#
	i<-i+1#
#
}
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (int.se + b0>3) a <- a+1#
	i<-i+1#
#
}
print(a)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (int.se + b0>3) a <- a+1#
	if (int.se - b0<3) a <- a+1#
	i<-i+1#
#
}#
#
print(a)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<10) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (b0 + int.se >3) a <- a+1#
	if (b0 - int.se <3) a <- a+1#
	i<-i+1#
#
}#
#
print(a)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (b0 + int.se >3) a <- a+1#
	if (b0 - int.se <3) a <- a+1#
	i<-i+1#
#
}#
#
print(a)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	b0 <- coef(summary(model))[1,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	i<-i+1#
#
}#
#
print(a)
b1 <- coef(summary(model))[2,1]
b1
summary(model)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b1 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) a <- a+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) a <- a+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) a <- a+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) a <- a+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	yhat <- predict(model)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)
i <- 1
require(hett)#
yhat1 <- tlm(y ~ x1 + x2)#
yhat1#
summary(yhat1)#
i <- 1#
a <- 0#
b <- 0#
c <- 0#
while (i<1000)#
{#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model2 <- tlm(y ~ x1 + x2)#
	int.se <- coef(summary(model2))[1,2]#
	x1.se <- coef(summary(model2))[2,2]#
	x2.se <- coef(summary(model2))[2,2]#
	b0 <- coef(summary(model2))[1,1]#
	b1 <- coef(summary(model2))[2,1]#
	b2 <- coef(summary(model2))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
}
errors <- rt(100,2)
y <- 3+(0.1*x1)+(0.5*x2)+errors
model2 <- tlm(y ~ x1 + x2)
int.se <- coef(summary(model2))[1,2]
x1.se <- coef(summary(model2))[2,2]
x2.se <- coef(summary(model2))[2,2]
b0 <- coef(summary(model2))[1,1]#
	b1 <- coef(summary(model2))[2,1]#
	b2 <- coef(summary(model2))[3,1]
if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1
i <- 1#
a <- 0#
b <- 0#
c <- 0
if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1
i <- 1#
i#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- tlm(y ~ x1 + x2)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)
summary(model)
b0 <- coef(summary(model))[1,1]
b0
?tlm
tlm(y~x1+x2)
model1 <- tlm(y~x1+x2)
summary(model1)
model1
errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- tlm(y ~ x1 + x2)#
	model
model[,1]
dim(model)
as.matrix(model)
model
summary(model)
coef(summary(model))[1,]
coef(summary(model))[,1]
coef(summary(model))
install.packages(broom)
install.package(broom)
install.packages(broom)
require(broom)
??tidy
X <- cbind(1,x1,x2)
Betas <- solve(t(X) %*% X) %*% t(X) %*% y#
Var <- anova(model)[[3]][2] * solve(t(X) %*% X)#
SE <- sqrt(diag(Var))
model
anova(model)
Betas <- solve(t(X) %*% X) %*% t(X) %*% y
Betas
i <- 1#
i#
#
#counters, if true value of int, b1, b2 are within interval#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- tlm(y ~ x1 + x2)#
	model#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
#
}
i <- 1#
i#
#
#counters, if true value of int, b1, b2 are within interval#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- tlm(y ~ x1 + x2)#
	model#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	#code below here doesn't work#
	#b0 <- coef(summary(model))[1,1]#
	#b1 <- coef(summary(model))[2,1]#
	#b2 <- coef(summary(model))[3,1]#
	#if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	#if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	#if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	print(summary(model))#
	i<-i+1#
#
}
data(Prostate)#
#
#create full model#
full = lm(lpsa ~ .,data = Prostate)#
summary(full)
library(lasso2)#
data(Prostate)#
#
#create full model#
full = lm(lpsa ~ .,data = Prostate)#
summary(full)
yhat <- predict(full)#
residuals <- Prostate$lpsa-yhat#
summary(residuals)
X <- Prostate[,1:8]#
X
X <- Prostate#
X#
t <- t(X)#
X <- t(t(X))#
tbi <- t %*% X#
inv <- solve(tbi)#
y <- Prostate$lpsa#
part2 <- t %*% y#
part2#
betas <- inv %*% part2
betas
X
betas
summary(full)
X <- Prostate[,1:8]#
X <- cbind(1,X)#
X
t <- t(X)#
X <- t(t(X))#
tbi <- t %*% X#
inv <- solve(tbi)#
y <- Prostate$lpsa#
part2 <- t %*% y#
part2#
betas <- inv %*% part2
betas
summary(full)
Hessian<-function(y,Xmat, beta) {#
  eta <- Xmat%*%beta#
  pp <- exp(eta)/(1+exp(eta))#
  ## R doesn't diagnolize matrices, even if it is n x 1!#
  pp<-c(pp)#
  W<-diag(pp*(1-pp))#
  Hmat<--t(Xmat)%*%W%*%Xmat#
  return(Hmat)#
}
Hessian(y,X,beta.old)#
Score(y,X,beta.old)
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,p+1)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:p+1) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
beta.old <- betas
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
Hessian<-function(y,Xmat, beta) {#
  eta <- Xmat%*%beta#
  pp <- exp(eta)/(1+exp(eta))#
  ## R doesn't diagnolize matrices, even if it is n x 1!#
  pp<-c(pp)#
  W<-diag(pp*(1-pp))#
  Hmat<--t(Xmat)%*%W%*%Xmat#
  return(Hmat)#
}#
#
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,p)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:p) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}#
#
###Set up for the loop#
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
#
beta.old <- betas#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
score.vector<-rep(0,p)
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,8)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:8) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}
###Set up for the loop#
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
#
beta.old <- betas#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
dim(Hess)
Hess
dim(Svec)
Svec
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,9)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:9) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}#
#
###Set up for the loop#
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
#
beta.old <- betas#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- as.matrix(Score(y,X,beta.old))#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
solve(Hess)
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,8)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:8) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}#
#
###Set up for the loop#
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
#
beta.old <- betas#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- as.matrix(Score(y,X,beta.old))#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}
solve(Hess)
p<-ncol(X)#
n<-nrow(X)#
#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	beta.old <- beta.new#
	i <- i+1#
	print(beta.new)#
}
Score<-function(y,Xmat,beta) {#
  score.vector<-rep(0,p)#
  # linear predictor#
  eta <- Xmat%*%beta#
  # prob#
  pp <- c(exp(eta)/(1+exp(eta)))#
  for (k in 1:p) {#
    score.vector[k]<-sum(y*Xmat[,k]-pp*Xmat[,k])#
  }#
  return(score.vector)#
}#
#
###Set up for the loop#
diff <- 1000#
tol <- -1e-10#
maxIt <- 2#
i <- 0#
#
beta.old <- betas#
beta.save <- beta.old#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- as.matrix(Score(y,X,beta.old))#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	#beta.save <- cbind(beta.save,beta.new)#
	#diff <- max((beta.new-beta.old)^2)#
	beta.old <- beta.new#
	i <- i+1#
	print(i)#
}#
p<-ncol(X)#
n<-nrow(X)#
#
while (tol < diff & i < maxIt) {#
	Hess <- Hessian(y,X,beta.old)#
	Svec <- Score(y,X,beta.old)#
	beta.new <- beta.old-solve(Hess)%*%Svec#
	beta.old <- beta.new#
	i <- i+1#
	print(beta.new)#
}
Hess
solve(Hess)
beta.new
beta.old
beta.old <- betas
beta.old
I<-Ihat<- -Hessian(y, X, beta.old)
I
Cov.beta<-solve(Ihat)
Cov.beta
SE<-diag(Cov.beta)^0.5
SE
Ztest<-beta.new/SE
pvalues<-(1-pnorm(abs(Ztest)))*2
summary(full)
Var <- anova(full)[[3]][2] * solve(t(X) %*% X)#
SE <- sqrt(diag(Var))
SE
anova(full)
anova(full)[[3]]
anova(ful)[,2]
anova(full)[,2]
anova(full)[,2][2]
Var <- anova(full)[,2] * solve(t(X) %*% X)#
SE <- sqrt(diag(Var))
SE
summary(full)
Var
I<-Ihat<- -Hessian(y, X, betas)
solve(I)
solve(Ihat)
Cov.beta<-solve(Ihat)
diag(Cov.beta)
sqrt(diag(Cov.beta))
summary(full)
betas
anova(full)
Ztest<-betas/SE#
pvalues<-(1-pnorm(abs(Ztest)))*2
Ztest
pvalues
betas
betas-betas[1,]
b<-betas-betas[1,]
b/SE
summary(full)
require(alr3)#
?transact#
transact#
#
#generate A and D#
transact$A <- (transact$T1+transact$T2)/2#
transact$A#
transact$D <- transact$T1-transact$T2#
transact$D
#Fit models M1-M4#
M1 <- lm(Time ~ T1 + T2, data=transact)#
M2 <- lm(Time ~ A + D, data=transact)#
M3 <- lm(Time ~ T2 + D, data=transact)#
M4 <- lm(Time ~ T1 + T2 + A + D, data=transact)#
M5 <- lm(Time ~ T1 + D, data=transact)#
summary(M5)#
#
(sd(transact$Time))^2
summary(M1)
mean(transact$time)
transact$time
transact
mean(transact$Time)
summary(M1)
?transact
plot(density(transact$time))
plot(density(transact$Time))
rpois(6607.488)
?rpois
pois <- rpois(261,6607.447)
plot(density(pois))
glm(Time ~ T1 + T2, family=poisson)
glm(Time ~ T1 + T2, family=poisson,data=transact))
glm(Time ~ T1 + T2, family=poisson,data=transact)
summary(glm(Time ~ T1 + T2, family=poisson,data=transact))
summary(glm(Time ~ T1 + T2 + A + D, family=poisson,data=transact))
correlation(transact$A,transact$T1)
correlate(transact$A,transact$T1)
corr(transact$A,transact$T1)
cor(transact$A,transact$T1)
cor(transact$A,transact$T2)
cor(transact$D,transact$T2)
cor(transact$D,transact$T1)
summary(glm(Time ~ T2 + D, family=poisson,data=transact))
summary(glm(Time ~ A + D, family=poisson,data=transact))
require(alr3)#
?transact#
transact#
#
#generate A and D#
transact$A <- (transact$T1+transact$T2)/2#
transact$A#
transact$D <- transact$T1-transact$T2#
transact$D#
#
#Fit models M1-M4#
M1 <- lm(Time ~ T1 + T2, data=transact)#
M2 <- lm(Time ~ A + D, data=transact)#
M3 <- lm(Time ~ T2 + D, data=transact)#
M4 <- lm(Time ~ T1 + T2 + A + D, data=transact)
summary(M1)#
summary(M2)#
summary(M3)#
summary(M4)
#########
#Part A##
#########
#
x1 <- seq(1,100,1)#
x2 <- rbinom(100,1,.5)#
#
i <- 1#
#
#counters, if true value of int, b1, b2 are within interval#
a <- 0#
b <- 0#
c <- 0#
while (i<100) {#
	errors <- rt(100,2)#
	y <- 3+(0.1*x1)+(0.5*x2)+errors#
	model <- lm(y ~ x1 + x2)#
	int.se <- coef(summary(model))[1,2]#
	x1.se <- coef(summary(model))[2,2]#
	x2.se <- coef(summary(model))[2,2]#
	b0 <- coef(summary(model))[1,1]#
	b1 <- coef(summary(model))[2,1]#
	b2 <- coef(summary(model))[3,1]#
	if (3 < b0 + int.se & 3 > b0 - int.se) a <- a+1#
	if (.1 < b1 + x1.se & .1 > b1 - x1.se) b <- b+1#
	if (.5 < b2 + x2.se & .5 > b2 - x2.se) c <- c+1#
	i<-i+1#
#
}#
#
print(a)#
print(b)#
print(c)#
#
X <- cbind(1,x1,x2)#
#
X#
t <- t(X)#
X <- t(t(X))#
tbi <- t %*% X#
inv <- solve(tbi)#
part2 <- t %*% y#
part2#
inv %*% part2#
coef(summary(model))[,2]+coef(summary(model))[,1]
data(nslyV,package="mi")
hosp <- read.csv("MissingDataHosp.csv")#
summary(hosp)
########
#SETUP##
########
#
### Set the working directory where the data is stored#
setwd("/Users/sarahcox/Documents/Coursework/NYU - MS/Spring2015/Education DS/Data/")#
#
### Get the list of usernames#
responses <- read.csv("CleanedResponses.csv")#
username.field <- data.frame(responses[,4])#
#
### Set the working directory for text files to be downloaded#
setwd("/Users/sarahcox/Documents/Coursework/NYU - MS/Spring2015/Education DS/Data/Text Files/Usernames")#
#
library(RJSONIO)#
#########################
#USERNAME AND URL LISTS##
#########################
#
### Extract the list of non-blank usernames#
n <- nrow(username.field)#
username.list <- list()#
for (i in 1:n) {#
	username <- toString(username.field[i,])#
	if (username != "") {#
		username.list <- rbind(username.list,username)#
	}#
}#
#
### Create list of URLs#
n <- nrow(username.list)#
url.list <- list()#
for (i in 1:n) {#
	url <- paste0("http://www.reddit.com/user/",username.list[i,],"/comments/.json")#
	url.list <- rbind(url.list,url)#
}#
#
#####FROM STACKOVERFLOW#
#
### The following code creates a data frame of user comments#
url <- as.character(url.list[1])#
rawdat <- fromJSON(readLines(url, warn = FALSE))#
main.node <- rawdat$data$children$data$body#
#
for (i in 2:n) {#
	url <- as.character(url.list[i])#
	rawdat <- fromJSON(readLines(url, warn = FALSE))#
	main.2 <- rawdat$data$children$data$body#
	main.node <- cbind(main.node,main.2)#
	print(url)#
}#
#
colnames(main.node) <- username.list#
#
### Write matrix into text files#
#
for (i in 1:n) {#
	write(main.node[,i],file = as.character(username.list[i]))#
}#
##############
#TEXT MINING##
##############
#
### Build the corpus                                 #
cname <- file.path("/Users/sarahcox/Documents/Coursework/NYU - MS/Spring2015/Education DS/Data/Text Files/Usernames")#
cname#
length(dir(cname))  #Number of documents#
dir(cname)          #Check the filenames#
#
docs <- Corpus(DirSource(cname))#
docs#
inspect(docs[2])    #Make sure that the data was properly loaded#
#
# Conversion to Lower Case#
docs <- tm_map(docs, content_transformer(tolower))#
inspect(docs[2])#
# Remove Numbers#
docs <- tm_map(docs, removeNumbers)#
inspect(docs[2])#
#
# Remove Punctuation#
docs <- tm_map(docs, removePunctuation)#
inspect(docs[2])#
#
# Remove stop words  (ie for, very, and, of, are, ...)#
stopwords("english")#
docs <- tm_map(docs, removeWords, stopwords("english"))#
inspect(docs[2])#
#
# Remove Single Letters#
docs <- tm_map(docs, removeWords, letters)#
inspect(docs[2])#
#
# Remove Whitespace#
docs <- tm_map(docs, stripWhitespace)#
inspect(docs[2])#
#
# Stemming#
docs <- tm_map(docs, stemDocument)#
inspect(docs[2])#
#
# Remove some URLs#
docs <- tm_map(docs, removeWords, c("httpwwwredditcomrleagueoflegendssearchqekkoampsortnewamprestrictsronamptallpag","httpwwwredditcomrleagueoflegendssearchqurgotampsortnewamprestrictsronamptal"))#
inspect(docs[2])#
# Creating a Document Term Matrix#
dtm <- DocumentTermMatrix(docs)#
dtm#
dim(dtm)#
# Get term frequencies by converting dtm into a matrix and summing col counts#
freq <- colSums(as.matrix(dtm))#
length(freq)#
freq[8:16]#
#
# Order frequencies, see least frequent terms first#
ord <- order(freq)#
# Least frequent terms#
freq[head(ord)]#
#
# Most frequent terms#
freq[tail(ord)]#
freq[rev(ord)][1:20]#
#
#We can also find associations with a word, specifying a correlation limit.#
findAssocs(dtm, "woman", corlimit=0.8)#
findAssocs(dtm, "gender", corlimit=0.8)#
findAssocs(dtm, "women", corlimit=0.8)#
findAssocs(dtm, "girl", corlimit=0.8)
library(RJSONIO)#
options(scipen=999)#
library(lasso2)#
library(tm)           # Framework for text mining.#
library(SnowballC) # Provides wordStem() for stemming.#
library(qdap)         # Quantitative discourse analysis of transcripts.#
library(qdapDictionaries)#
library(dplyr)        # Data preparation and pipes %>%.#
library(RColorBrewer) # Generate palette of colours for plots.#
library(ggplot2)      #Plot word frequencies.#
library(scales)       #Include commas in numbers.#
library(Rgraphviz)    #Correlation plots.
### Extract the list of non-blank usernames#
n <- nrow(username.field)#
username.list <- list()#
for (i in 1:n) {#
	username <- toString(username.field[i,])#
	if (username != "") {#
		username.list <- rbind(username.list,username)#
	}#
}#
#
### Create list of URLs#
n <- nrow(username.list)#
url.list <- list()#
for (i in 1:n) {#
	url <- paste0("http://www.reddit.com/user/",username.list[i,],"/comments/.json")#
	url.list <- rbind(url.list,url)#
}
### The following code creates a data frame of user comments#
url <- as.character(url.list[1])#
rawdat <- fromJSON(readLines(url, warn = FALSE))#
main.node <- rawdat$data$children$data$body#
#
for (i in 2:n) {#
	url <- as.character(url.list[i])#
	rawdat <- fromJSON(readLines(url, warn = FALSE))#
	main.2 <- rawdat$data$children$data$body#
	main.node <- cbind(main.node,main.2)#
	print(url)#
}#
#
colnames(main.node) <- username.lis
colnames(main.node) <- username.list
url <- as.character(url.list[1])
rawdat <- fromJSON(readLines(url, warn = FALSE))
rawdat
main.node <- rawdat$data$children$data$body
main.node
rawdat$data$children$data
rawdat#data$children
rawdat$data
??fromJSON
library(jsonlite)
main.node <- rawdat$data$children$data$body
main.node
url <- as.character(url.list[1])
rawdat <- fromJSON(readLines(url, warn = FALSE))
main.node <- rawdat$data$children$data$body
main.node
library(rjsonlite)
??fromJSON
library(jsonlite)
### Build the corpus                                 #
cname <- file.path("/Users/sarahcox/Documents/Coursework/NYU - MS/Spring2015/Education DS/Data/Text Files/Usernames")#
cname#
length(dir(cname))  #Number of documents#
dir(cname)          #Check the filenames#
#
docs <- Corpus(DirSource(cname))#
docs#
inspect(docs[2])
### The following code creates a data frame of user comments#
url <- as.character(url.list[1])#
rawdat <- fromJSON(readLines(url, warn = FALSE))#
main.node <- rawdat$data$children$data$body#
#
for (i in 2:n) {#
	url <- as.character(url.list[i])#
	rawdat <- fromJSON(readLines(url, warn = FALSE))#
	main.2 <- rawdat$data$children$data$body#
	main.node <- cbind(main.node,main.2)#
	print(url)#
}#
#
colnames(main.node) <- username.list#
#
### Write matrix into text files#
#
for (i in 1:n) {#
	write(main.node[,i],file = as.character(username.list[i]))#
}
### Build the corpus                                 #
cname <- file.path("/Users/sarahcox/Documents/Coursework/NYU - MS/Spring2015/Education DS/Data/Text Files/Usernames")#
cname#
length(dir(cname))  #Number of documents#
dir(cname)          #Check the filenames#
#
docs <- Corpus(DirSource(cname))#
docs#
inspect(docs[2])    #Make sure that the data was properly loaded
docs
dir(cname)          #Check the filenames
inspect(docs[2])    #Make sure that the data was properly loaded
inspect(docs[6])
docs
docs <- Corpus(DirSource(cname))
dir(cname)          #Check the filenames
username.list
inspect(docs[11])    #Make sure that the data was properly loaded
dim(dtm)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
class_pol = classify_polarity(docs, algorithm="bayes")
library(sentiment)
install.packages("sentiment")
library(sentiment)
?qdap
install.packages("qdap")
require(qdap)
polarity(docs[1])
inspect(docs[11])    #Make sure that the data was properly loaded
# Conversion to Lower Case#
docs <- tm_map(docs, content_transformer(tolower))#
inspect(docs[2])#
# Remove Numbers#
docs <- tm_map(docs, removeNumbers)#
inspect(docs[2])#
#
# Remove Punctuation#
docs <- tm_map(docs, removePunctuation)#
inspect(docs[2])#
#
# Remove stop words  (ie for, very, and, of, are, ...)#
stopwords("english")#
docs <- tm_map(docs, removeWords, stopwords("english"))#
inspect(docs[2])#
#
# Remove Single Letters#
docs <- tm_map(docs, removeWords, letters)#
inspect(docs[2])#
#
# Remove Whitespace#
docs <- tm_map(docs, stripWhitespace)#
inspect(docs[2])#
#
# Stemming#
docs <- tm_map(docs, stemDocument)#
inspect(docs[6])
polarity(docs[6])
polarity(docs[1])
polarity(docs[2])
polarity(docs[3])
polarity(docs)
polarity(docs[11])
word_associate(docs[11],c("traffic"))
word_associate(docs[11],match.string=c("traffic"))
word_associate(dtm,match.string=c("traffic"))
a <- word_associate(dtm,match.string=c("woman"))
a
k
library(alr3)#
library(rstan)#
#
data(ais)
model_string <- "#
data {#
  int<lower=0> N;#
  real y[N];#
}
model_string
))
0
}
k
exit
escape
""
print(mcmc_samples)
data(ais)
